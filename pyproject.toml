[build-system]
requires = [
  "setuptools >= 61.0.0", # Support for setuptools config in pyproject.toml
]
build-backend = "setuptools.build_meta"

[project]
name = "ansibug"
description = "Ansible Debug Adapter Protocol Implementation"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [{ name = "Jordan Borean", email = "jborean93@gmail.com" }]
keywords = ["ansible", "debug", "lsp", "dap"]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/jborean93/ansibug"

[project.optional-dependencies]
dev = [
  "ansible-core >= 2.14.0",
  "argcomplete",
  # Support for source_pkgs
  "coverage[toml] >= 5.3",
  "cryptography",
  "black == 23.9.1",
  "isort == 5.12.0",
  "mypy == 1.6.0",
  "pre-commit",
  "pytest",
  "pytest-xdist",
  "tox",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = { attr = "ansibug._version.__version__" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
ansibug = ["py.typed"]

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"

[tool.mypy]
exclude = "docs/|build/"
mypy_path = "$MYPY_CONFIG_FILE_DIR/src:$MYPY_CONFIG_FILE_DIR/tests/utils"
python_version = "3.9"
explicit_package_bases = true
show_error_codes = true
show_column_numbers = true
# disallow_any_unimported = true  # Ansible doesn't have much annotation
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "ansible.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"
testpaths = "tests"
junit_family = "xunit2"

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.run]
branch = true
# Needed as tests run with a different cwd, env is set in tox
data_file = "${PROJECT_ROOT}/.coverage"
# Ansible's collection loader does funny things with collection coverage. The
# data is collected but it'll still warn so disable the warnings.
disable_warnings = ["module-not-imported", "no-data-collected"]
source_pkgs = ["ansibug", "ansible_collections.ansibug.dap"]
omit = ["*/ansibug/_version.py"]
parallel = true

[tool.coverage.report]
show_missing = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = sanity,py3{9,10,11,12}

[testenv]
package = wheel
#wheel_build_env = .pkg
extras =
    dev
install_command = python -Im pip install --no-compile {opts} {packages}
passenv =
    PYTEST_ADDOPTS

[testenv:sanity]
commands =
    python -m black . --check
    python -m isort . --check-only
    python -m mypy .

[testenv:py3{9,10,11,12}]
set_env =
    COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    PROJECT_ROOT={toxinidir}
commands_pre = python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'
commands = python -m coverage run -m pytest -v {posargs:-n auto}
commands_post =
    python -m coverage combine
    python -m coverage report
    python -m coverage xml
"""
